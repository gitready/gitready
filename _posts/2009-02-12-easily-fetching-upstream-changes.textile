---
layout: post
title: Upstream-Änderungen einfach herunterladen
category: intermediate
published: true
---

Dieser Tip ist von "Dav Glass":http://blog.davglass.com/, dessen Arbeit an "YUI":http://developer.yahoo.com/yui/ auf "GitHub":http://github.com/yui häufig Commits erfordert. Also hat er sich einen "hilfreichen alias":http://gitready.com/intermediate/2009/02/06/helpful-command-aliases.html erstellt, mit dem er Änderungen einfach zusammenführen kann.

Zunächst hat er ein konsistentes Namensschema für sein entferntes Upstream-Repository festgelegt:

@git remote add upstream git://github.com/user/repo.git@

Das wirfst du dann in deine @.gitconfig@ und schon bist du fertig:

<pre>
[alias]
  pu = !"git fetch origin -v; git fetch upstream -v; git merge upstream/master"
</pre>

@git pu@ zieht alle neuesten Änderungen von beiden entfernten Repositories und führt sie zusammen.

Was ist daran aber anders als ein @git pull upstream master@? Es werden Änderungen von zwei verschiedenen Quellen zusammengeführt: Der eigene Fork und das Upstream-Repository. Ein "pull":http://de.gitready.com/beginner/2009/01/21/pushing-and-pulling.html zieht für gewöhnlich nur Änderungen von einer Quelle. Falls du verwirrt bist, wie das funktioniert, schau im Abschnitt "History" von "Git for Computer Scientists":http://eagain.net/articles/git-for-computer-scientists/#history vorbei. Dort zeigen dir ein paar Schaubilder, wie der Fetch- und Merge-Prozess funktionieren.

Natürlich gibt es viele unterschiedliche Wege, mit dem Problem umzugehen. Du könntest beispielsweise "rebase":http://de.gitready.com/intermediate/2009/01/31/intro-to-rebase.html oder sogar "Pull mit Rebase":http://de.gitready.com/advanced/2009/02/11/pull-with-rebase.html anstatt das Zusammenführen (Merge) verwenden. Es hängt alles davon ab, wie du deine Repository-History organisieren möchtest und was für dich am einfachsten ist.

Wenn du Aliase oder Vorschläge hast, um diesen Prozess einfacher zu gestalten, lass es uns gerne wissen!
